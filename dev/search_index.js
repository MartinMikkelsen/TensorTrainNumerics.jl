var documenterSearchIndex = {"docs":
[{"location":"resources/#Resources","page":"Resources","title":"Resources","text":"","category":"section"},{"location":"theory/#Tensor-trains","page":"Tensor trains","title":"Tensor trains","text":"","category":"section"},{"location":"theory/#Table-of-Contents","page":"Tensor trains","title":"Table of Contents","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"Basics\nMultiplication\nTensor Train Operator times Tensor Train Vector\nTensor Train Operator times Tensor Train Operator\nAddition\nConcatenation\nMatricization\nVisualization\nTensor Train Decomposition\nExample with Tolerance\nOptimization\nALS\nMALS\nDMRG","category":"page"},{"location":"theory/#Basics","page":"Tensor trains","title":"Basics","text":"","category":"section"},{"location":"theory/#Multiplication","page":"Tensor trains","title":"Multiplication","text":"","category":"section"},{"location":"theory/#Tensor-train-operator-times-tensor-train-vector","page":"Tensor trains","title":"Tensor train operator times tensor train vector","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"To multiply a tensor train operator (TToperator) by a tensor train vector (TTvector), use the * operator.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"using TensorTrainNumerics\n\n# Define the dimensions and ranks for the TTvector\ndims = (2, 2, 2)\nrks = [1, 2, 2, 1]\n\n# Create a random TTvector\ntt_vec = rand_tt(dims, rks)\n\n# Define the dimensions and ranks for the TToperator\nop_dims = (2, 2, 2)\nop_rks = [1, 2, 2, 1]\n\n# Create a random TToperator\ntt_op = rand_tto(op_dims, 3)\n\n# Perform the multiplication\nresult = tt_op * tt_vec\n\n# Visualize the result\nvisualize(result)","category":"page"},{"location":"theory/#Tensor-train-operator-times-tensor-train-operator","page":"Tensor trains","title":"Tensor train operator times tensor train operator","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"To multiply two tensor train operators, use the * operator.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"# Create another random TToperator\ntt_op2 = rand_tto(op_dims, 3)\n\n# Perform the multiplication\nresult_op = tt_op * tt_op2\n\n# Visualize the result\nvisualize(result_op)","category":"page"},{"location":"theory/#Addition","page":"Tensor trains","title":"Addition","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"To add two tensor train vectors or operators, use the + operator.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"# Create another random TTvector\ntt_vec2 = rand_tt(dims, rks)\n\n# Perform the addition\nresult_add = tt_vec + tt_vec2\n\n# Visualize the result\nvisualize(result_add)","category":"page"},{"location":"theory/#Concatenation","page":"Tensor trains","title":"Concatenation","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"To concatenate two tensor train vectors or operators, use the concatenate function.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"# Concatenate two TTvectors\nresult_concat = concatenate(tt_vec, tt_vec2)\n\n# Visualize the result\nvisualize(result_concat)","category":"page"},{"location":"theory/#Matricization","page":"Tensor trains","title":"Matricization","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"To convert a tensor train vector or operator into its matrix form, use the matricize function.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"# Matricize the TTvector\nresult_matrix = matricize(tt_vec)\n\n# Print the result\nprintln(result_matrix)","category":"page"},{"location":"theory/#Visualization","page":"Tensor trains","title":"Visualization","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"To visualize a tensor train vector or operator, use the visualize function.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"# Visualize the TTvector\nvisualize(tt_vec)","category":"page"},{"location":"theory/#Tensor-Train-Decomposition","page":"Tensor trains","title":"Tensor Train Decomposition","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"The ttv_decomp function performs a tensor train decomposition on a given tensor.","category":"page"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"using TensorTrainNumerics\n\n# Define a 3-dimensional tensor\ntensor = rand(2, 3, 4)\n\n# Perform the tensor train decomposition\nttv = ttv_decomp(tensor)\n\n# Print the TTvector ranks\nprintln(ttv.ttv_rks)","category":"page"},{"location":"theory/#Explanation","page":"Tensor trains","title":"Explanation","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"The ttv_decomp function takes a tensor as input and returns its tensor train decomposition in the form of a TTvector. The decomposition is performed using the Hierarchical SVD algorithm, which decomposes the tensor into a series of smaller tensors (cores) connected by ranks.","category":"page"},{"location":"theory/#Example-with-Tolerance","page":"Tensor trains","title":"Example with Tolerance","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"using TensorTrainNumerics\n\n# Define a 3-dimensional tensor\ntensor = rand(2, 3, 4)\n\n# Perform the tensor train decomposition with a custom tolerance\nttv = ttv_decomp(tensor, tol=1e-10)\n\n# Print the TTvector ranks\nprintln(ttv.ttv_rks)","category":"page"},{"location":"theory/#Optimization","page":"Tensor trains","title":"Optimization","text":"","category":"section"},{"location":"theory/#ALS","page":"Tensor trains","title":"ALS","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"using TensorTrainNumerics\n\n# Define the dimensions and ranks for the TTvector\ndims = (2, 2, 2)\nrks = [1, 2, 2, 1]\n\n# Create a random TTvector for the initial guess\ntt_start = rand_tt(dims, rks)\n\n# Create a random TToperator for the matrix A\nA_dims = (2, 2, 2)\nA_rks = [1, 2, 2, 1]\nA = rand_tto(A_dims, 3)\n\n# Create a random TTvector for the right-hand side b\nb = rand_tt(dims, rks)\n\n# Solve the linear system Ax = b using the ALS algorithm\ntt_opt = als_linsolv(A, b, tt_start; sweep_count=2)\n\n# Print the optimized TTvector\nprintln(tt_opt)\n\n# Define the sweep schedule and rank schedule for the eigenvalue problem\nsweep_schedule = [2, 4]\nrmax_schedule = [2, 3]\n\n# Solve the eigenvalue problem using the ALS algorithm\neigenvalues, tt_eigvec = als_eigsolv(A, tt_start; sweep_schedule=sweep_schedule, rmax_schedule=rmax_schedule)\n\n# Print the lowest eigenvalue and the corresponding eigenvector\nprintln(\"Lowest eigenvalue: \", eigenvalues[end])\nprintln(\"Corresponding eigenvector: \", tt_eigvec)","category":"page"},{"location":"theory/#MALS","page":"Tensor trains","title":"MALS","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"using TensorTrainNumerics\n\ndims = (2, 2, 2)\nrks = [1, 2, 2, 1]\n\n# Create a random TTvector for the initial guess\ntt_start = rand_tt(dims, rks)\n\n# Create a random TToperator for the matrix A\nA_dims = (2, 2, 2)\nA_rks = [1, 2, 2, 1]\nA = rand_tto(A_dims, 3)\n\n# Create a random TTvector for the right-hand side b\nb = rand_tt(dims, rks)\n\n# Solve the linear system Ax = b using the MALS algorithm\ntt_opt = mals_linsolv(A, b, tt_start; tol=1e-12, rmax=4)\n\n# Print the optimized TTvector\nprintln(tt_opt)\n\n# Define the sweep schedule and rank schedule for the eigenvalue problem\nsweep_schedule = [2, 4]\nrmax_schedule = [2, 3]\n\n# Solve the eigenvalue problem using the MALS algorithm\neigenvalues, tt_eigvec, r_hist = mals_eigsolv(A, tt_start; tol=1e-12, sweep_schedule=sweep_schedule, rmax_schedule=rmax_schedule)\n\n# Print the lowest eigenvalue and the corresponding eigenvector\nprintln(\"Lowest eigenvalue: \", eigenvalues[end])\nprintln(\"Corresponding eigenvector: \", tt_eigvec)\nprintln(\"Rank history: \", r_hist)","category":"page"},{"location":"theory/#DMRG","page":"Tensor trains","title":"DMRG","text":"","category":"section"},{"location":"theory/","page":"Tensor trains","title":"Tensor trains","text":"using TensorTrainNumerics\n\ndims = (2, 2, 2)\nrks = [1, 2, 2, 1]\n\n# Create a random TTvector for the initial guess\ntt_start = rand_tt(dims, rks)\n\n# Create a random TToperator for the matrix A\nA_dims = (2, 2, 2)\nA_rks = [1, 2, 2, 1]\nA = rand_tto(A_dims, 3)\n\n# Create a random TTvector for the right-hand side b\nb = rand_tt(dims, rks)\n\n# Solve the linear system Ax = b using the DMRG algorithm\ntt_opt = dmrg_linsolv(A, b, tt_start; sweep_count=2, N=2, tol=1e-12)\n\n# Print the optimized TTvector\nprintln(tt_opt)\n\n# Define the sweep schedule and rank schedule for the eigenvalue problem\nsweep_schedule = [2, 4]\nrmax_schedule = [2, 3]\n\n# Solve the eigenvalue problem using the DMRG algorithm\neigenvalues, tt_eigvec, r_hist = dmrg_eigsolv(A, tt_start; N=2, tol=1e-12, sweep_schedule=sweep_schedule, rmax_schedule=rmax_schedule)\n\n# Print the lowest eigenvalue and the corresponding eigenvector\nprintln(\"Lowest eigenvalue: \", eigenvalues[end])\nprintln(\"Corresponding eigenvector: \", tt_eigvec)\nprintln(\"Rank history: \", r_hist)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"#TensorTrainNumerics.jl","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"","category":"section"},{"location":"#Work-in-progress","page":"TensorTrainNumerics.jl","title":"Work in progress","text":"","category":"section"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"Tensor Train Numerics is a Julia package designed to provide efficient numerical methods for working with tensor trains (TT) and quantized tensor trains (QTT). This package offers a comprehensive set of tools for constructing, manipulating, and performing operations on tensor trains, which are useful in various scientific and engineering applications, including high-dimensional data analysis, machine learning, and computational physics.","category":"page"},{"location":"#Key-features","page":"TensorTrainNumerics.jl","title":"Key features","text":"","category":"section"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"Tensor Train Decomposition: Efficient algorithms for decomposing high-dimensional tensors into tensor train format, reducing computational complexity and memory usage.\nTensor Operations: Support for basic tensor operations such as addition, multiplication, and contraction in tensor train format.\nDiscrete Operators: Implementation of discrete Laplacians, gradient operators, and shift matrices in tensor train format for solving partial differential equations and other numerical problems.\nQuantized Tensor Trains: Tools for constructing and manipulating quantized tensor trains, which provide further compression and efficiency for large-scale problems.\nIterative Solvers: Integration with iterative solvers for solving linear systems and eigenvalue problems in tensor train format.\nVisualization: Basic visualization tools for inspecting tensor train structures and their properties. ","category":"page"},{"location":"#Getting-started","page":"TensorTrainNumerics.jl","title":"Getting started","text":"","category":"section"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"To get started with Tensor Train Numerics, you can install the package using Julia's package manager:","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"using Pkg\nPkg.add(\"TensorTrainNumerics\")","category":"page"},{"location":"#Basic-example","page":"TensorTrainNumerics.jl","title":"Basic example","text":"","category":"section"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"using TensorTrainNumerics\n\n# Define the dimensions and ranks for the TTvector\ndims = (2, 2, 2)\nrks = [1, 2, 2, 1]\n\n# Create a random TTvector\ntt_vec = rand_tt(dims, rks)\n\n# Define the dimensions and ranks for the TToperator\nop_dims = (2, 2, 2)\nop_rks = [1, 2, 2, 1]\n\n# Create a random TToperator\ntt_op = rand_tto(op_dims, 3)\n\n# Perform the multiplication\nresult = tt_op * tt_vec\n\n# Visualize the result\n\nvisualize(result)","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"And we can print the result","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"println(result)","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"We can also unfold this","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"matricize(result)","category":"page"},{"location":"#Interpolation","page":"TensorTrainNumerics.jl","title":"Interpolation","text":"","category":"section"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"We can also do interpolation in the QTT framework:","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"using CairoMakie\nusing TensorTrainNumerics\n\nf = x -> cos(1 / (x^3 + 0.01)) + sin(π * x)\nnum_cores = 10  \nN = 150 \n\nqtt = interpolating_qtt(f, num_cores, N)\nqtt_rank_revealing = lagrange_rank_revealing(f, num_cores, N)\n\nqtt_values = matricize(qtt, num_cores)\nqtt_values_rank_revealing = matricize(qtt_rank_revealing, num_cores)\n\nx_points = LinRange(0, 1, 2^num_cores)\noriginal_values = f.(x_points)\n\nfig = Figure()\nax = Axis(fig[1, 1], title=\"Function Approximation\", xlabel=\"x\", ylabel=\"f(x)\")\n\nlines!(ax, x_points, original_values, label=\"Original Function\")\nlines!(ax, x_points, qtt_values_rank_revealing, label=\"QTT, rank rev.\", linestyle=:dash, color=:green)\nlines!(ax, x_points, qtt_values, label=\"QTT\", linestyle=:dash, color=:red)\n\naxislegend(ax)\nfig","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"We can visualize the interpolating QTT as ","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"visualize(qtt)","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"And similarly for the rank-revealing","category":"page"},{"location":"","page":"TensorTrainNumerics.jl","title":"TensorTrainNumerics.jl","text":"visualize(qtt_rank_revealing)","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/#tt_tools","page":"API","title":"tt_tools","text":"","category":"section"},{"location":"API/#TensorTrainNumerics.TTvector","page":"API","title":"TensorTrainNumerics.TTvector","text":"A structure representing a Tensor Train (TT) vector.\n\nFields\n\nN::Int64: The number of elements in the TT vector.\nttv_vec::Vector{Array{T,3}}: A vector of 3-dimensional arrays representing the TT cores.\nttv_dims::NTuple{M,Int64}: A tuple containing the dimensions of the TT vector.\nttv_rks::Vector{Int64}: A vector containing the TT ranks.\nttv_ot::Vector{Int64}: A vector containing the orthogonalization information.\n\nType Parameters\n\nT<:Number: The type of the elements in the TT vector.\n\n\n\n\n\n","category":"type"},{"location":"API/#TensorTrainNumerics.TToperator","page":"API","title":"TensorTrainNumerics.TToperator","text":"A structure representing a Tensor Train (TT) operator.\n\nFields\n\nN::Int64: The number of dimensions of the TT operator.\ntto_vec::Array{Array{T,4},1}: A vector of 4-dimensional arrays representing the TT cores.\ntto_dims::NTuple{M,Int64}: A tuple containing the dimensions of the TT operator.\ntto_rks::Array{Int64,1}: An array containing the TT ranks.\ntto_ot::Array{Int64,1}: An array containing the output dimensions of the TT operator.\n\ntvrks: the TT ranks ``(r0,...,rd)wherer0=r_d=1``\n\n\n\n\n\n","category":"type"},{"location":"API/#TensorTrainNumerics.QTTvector","page":"API","title":"TensorTrainNumerics.QTTvector","text":"QTTvector(vec::Vector{<:Array{<:Number, 3}}, rks::Vector{Int64}, ot::Vector{Int64})\n\nConstructs a Quantized Tensor Train (QTT) vector from a given vector of 3-dimensional arrays (cores).\n\nArguments\n\nvec::Vector{<:Array{<:Number, 3}}: A vector containing the cores of the QTT vector. Each core must be a 3-dimensional array with the first dimension equal to 2.\nrks::Vector{Int64}: A vector of integer ranks for the QTT vector.\not::Vector{Int64}: A vector of integer orthogonalization types for the QTT vector.\n\nReturns\n\nTTvector{T, N}: A tensor train vector of type T and length N.\n\nThrows\n\nAssertionError: If any core in vec does not have the first dimension equal to 2.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.QTToperator","page":"API","title":"TensorTrainNumerics.QTToperator","text":"QTToperator(vec::Vector{Array{T,4}}, rks::Vector{Int64}, ot::Vector{Int64}) where {T}\n\nConstructs a Quantum Tensor Train (QTT) operator from a vector of 4-dimensional arrays (cores).\n\nArguments\n\nvec::Vector{Array{T,4}}: A vector containing the cores of the QTT operator. Each core must be a 4-dimensional array with the first two dimensions equal to 2.\nrks::Vector{Int64}: A vector containing the rank sizes of the QTT operator.\not::Vector{Int64}: A vector containing the operator types.\n\nReturns\n\nTToperator{T,N}: A QTT operator constructed from the provided cores, rank sizes, and operator types.\n\nThrows\n\nAssertionError: If any core in vec does not have the first two dimensions equal to 2.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.is_qtt","page":"API","title":"TensorTrainNumerics.is_qtt","text":"is_qtt(tt::TTvector) -> Bool\n\nCheck if a given TTvector is a QTT (Quantized Tensor Train) vector.\n\nArguments\n\ntt::TTvector: The tensor train vector to be checked.\n\nReturns\n\nBool: Returns true if all dimensions of the tensor train vector are equal to 2, indicating it is a QTT vector, otherwise returns false.\n\nExample\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.is_qtt_operator","page":"API","title":"TensorTrainNumerics.is_qtt_operator","text":"is_qtt_operator(op::TToperator) -> Bool\n\nCheck if a given TToperator is a Quantum Tensor Train (QTT) operator.\n\nArguments\n\nop::TToperator: The tensor train operator to be checked.\n\nReturns\n\nBool: Returns true if all dimensions of the tensor train operator are equal to 2, indicating it is a QTT operator. Otherwise, returns false.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.zeros_tt","page":"API","title":"TensorTrainNumerics.zeros_tt","text":"zeros_tt(dims, rks; ot=zeros(Int64, length(dims)))\n\nCreate a tensor train (TT) tensor filled with zeros.\n\nArguments\n\ndims::Vector{Int}: A vector specifying the dimensions of the tensor.\nrks::Vector{Int}: A vector specifying the TT-ranks.\not::Vector{Int}: (Optional) A vector specifying the output tensor dimensions. Defaults to a vector of zeros with the same length as dims.\n\nReturns\n\nA TT tensor of type Float64 filled with zeros.\n\n\n\n\n\nzeros_tt(::Type{T}, dims::NTuple{N,Int64}, rks; ot=zeros(Int64, length(dims)))\n\nCreate a TTvector with zero entries.\n\nArguments\n\n::Type{T}: The element type of the TTvector.\ndims::NTuple{N,Int64}: A tuple specifying the dimensions of the TTvector.\nrks: A tuple specifying the TT-ranks.\not: An optional argument specifying the orthogonalization tensor. Defaults to a zero vector of the same length as dims.\n\nReturns\n\nA TTvector{T,N} with zero entries and specified dimensions and ranks.\n\nThrows\n\nAssertionError if the length of dims plus one is not equal to the length of rks.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.ones_tt","page":"API","title":"TensorTrainNumerics.ones_tt","text":"ones_tt(dims)\n\nCreate a tensor train (TT) format tensor filled with ones.\n\nArguments\n\ndims::Tuple: A tuple specifying the dimensions of the tensor.\n\nReturns\n\nA tensor train (TT) format tensor of the specified dimensions, filled with ones.\n\n\n\n\n\nones_tt(::Type{T}, dims) where T\n\nCreate a TTvector (Tensor Train vector) with all elements set to one.\n\nArguments\n\n::Type{T}: The data type of the elements in the tensor train.\ndims: A vector specifying the dimensions of the tensor train.\n\nReturns\n\nA TTvector{T,N} where N is the number of dimensions specified in dims.\n\nExample\n\n\n\n\n\nones_tt(n::Integer, d::Integer) -> TensorTrain\n\nCreate a tensor train (TT) format tensor filled with ones.\n\nArguments\n\nn::Integer: The size of each dimension of the tensor.\nd::Integer: The number of dimensions of the tensor.\n\nReturns\n\nTensorTrain: A tensor train with each element set to one.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.zeros_tto","page":"API","title":"TensorTrainNumerics.zeros_tto","text":"zeros_tto(dims, rks)\n\nCreate a tensor train object with all elements initialized to zero.\n\nArguments\n\ndims::Vector{Int}: A vector specifying the dimensions of the tensor.\nrks::Vector{Int}: A vector specifying the ranks of the tensor train.\n\nReturns\n\nA tensor train object with the specified dimensions and ranks, with all elements initialized to zero.\n\n\n\n\n\nzeros_tto(::Type{T}, dims::NTuple{N,Int64}, rks) where {T,N}\n\nCreate a tensor train operator (TTO) with all elements initialized to zero.\n\nArguments\n\n::Type{T}: The type of the elements in the tensor train.\ndims::NTuple{N,Int64}: A tuple containing the dimensions of the tensor train.\nrks: A vector containing the ranks of the tensor train.\n\nReturns\n\nA TToperator{T,N} object with the specified dimensions and ranks, and all elements initialized to zero.\n\nThrows\n\nAn AssertionError if the length of dims plus one is not equal to the length of rks.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.rand_tt","page":"API","title":"TensorTrainNumerics.rand_tt","text":"rand_tt(dims, rks; normalise=false, orthogonal=false)\n\nGenerate a random Tensor Train (TT) format tensor with specified dimensions and ranks.\n\nArguments\n\ndims::Vector{Int}: A vector specifying the dimensions of the tensor.\nrks::Vector{Int}: A vector specifying the TT-ranks.\nnormalise::Bool: A keyword argument to indicate whether the tensor should be normalised. Default is false.\northogonal::Bool: A keyword argument to indicate whether the tensor should be orthogonal. Default is false.\n\nReturns\n\nA random tensor in TT format with the specified properties.\n\n\n\n\n\nrand_tt(::Type{T}, dims, rks; normalise=false, orthogonal=false) where T\n\nGenerate a random Tensor Train (TT) tensor with specified dimensions and ranks.\n\nArguments\n\n::Type{T}: The data type of the tensor elements.\ndims: A vector specifying the dimensions of the tensor.\nrks: A vector specifying the TT-ranks.\nnormalise: A boolean flag indicating whether to normalize the TT-cores. Default is false.\northogonal: A boolean flag indicating whether to orthogonalize the TT-cores. Default is false.\n\nReturns\n\nA TT tensor with random elements of type T.\n\n\n\n\n\nrand_tt(dims, rmax::Int; T=Float64, normalise=false, orthogonal=false)\n\nGenerate a random Tensor Train (TT) vector with specified dimensions and rank.\n\nArguments\n\ndims::Vector{Int}: A vector specifying the dimensions of each mode of the tensor.\nrmax::Int: The maximum TT-rank.\nT::Type (optional): The element type of the tensor (default is Float64).\nnormalise::Bool (optional): If true, normalizes each core tensor (default is false).\northogonal::Bool (optional): If true, orthogonalizes each core tensor (default is false).\n\nReturns\n\nTTvector{T,d}: A TTvector object containing the generated TT cores, dimensions, ranks, and a zero vector for the TT ranks.\n\n\n\n\n\nrand_tt(x_tt::TTvector{T,N}; ε=convert(T,1e-3)) -> TTvector{T,N}\n\nGenerate a random tensor train (TT) vector by adding Gaussian noise to the input TT vector x_tt.\n\nArguments\n\nx_tt::TTvector{T,N}: The input TT vector to which noise will be added.\nε: The standard deviation of the Gaussian noise to be added. Default is 1e-3 converted to type T.\n\nReturns\n\nTTvector{T,N}: A new TT vector with added Gaussian noise.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.ttv_decomp","page":"API","title":"TensorTrainNumerics.ttv_decomp","text":"TT decomposition by the Hierarchical SVD algorithm  \t* Oseledets, I. V. (2011). Tensor-train decomposition. SIAM Journal on Scientific Computing, 33(5), 2295-2317. \t* Schollwöck, U. (2011). The density-matrix renormalization group in the age of matrix product states. Annals of physics, 326(1), 96-192. The root of the TT decomposition is at index i.e. A_i for i  index are left-orthogonal and A_i for i  index are right-orthogonal. Singular values lower than tol are discarded.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.ttv_to_tensor","page":"API","title":"TensorTrainNumerics.ttv_to_tensor","text":"ttv_to_tensor(x_tt::TTvector{T,N}) where {T<:Number, N}\n\nConvert a TTvector (Tensor Train vector) to a full tensor.\n\nArguments\n\nx_tt::TTvector{T,N}: The input TTvector to be converted. T is the element type, and N is the number of dimensions.\n\nReturns\n\nA tensor of type Array{T,N} with the same dimensions as specified in x_tt.ttv_dims.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.tto_decomp","page":"API","title":"TensorTrainNumerics.tto_decomp","text":"Returns the TT decomposition of a matrix using the HSVD algorithm\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.tto_to_tensor","page":"API","title":"TensorTrainNumerics.tto_to_tensor","text":"tto_to_tensor(tto::TToperator{T,N}) where {T<:Number, N}\n\nConvert a TToperator to a full tensor.\n\nArguments\n\ntto::TToperator{T,N}: The TToperator to be converted, where T is a subtype of Number and N is the order of the tensor.\n\nReturns\n\nA tensor of type Array{T, 2N} with dimensions [n_1, ..., n_d, n_1, ..., n_d], where n_i are the dimensions of the TToperator.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.rand_tto","page":"API","title":"TensorTrainNumerics.rand_tto","text":"rand_tto(dims, rmax::Int; T=Float64)\n\nGenerate a random Tensor Train (TT) operator with specified dimensions and maximum rank.\n\nArguments\n\ndims::Vector{Int}: A vector specifying the dimensions of the TT operator.\nrmax::Int: The maximum rank for the TT cores.\nT::DataType: The data type of the elements in the TT cores (default is Float64).\n\nReturns\n\nTToperator{T,d}: A TT operator with random elements.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.visualize","page":"API","title":"TensorTrainNumerics.visualize","text":"visualize(tt::TTvector)\n\nVisualizes a Tensor Train (TT) vector by creating a textual representation of its dimensions and ranks.\n\nArguments\n\ntt::TTvector: A Tensor Train vector object.\n\n\n\n\n\nvisualize(tt::TToperator)\n\nVisualizes a Tensor Train (TT) operator by creating a textual representation of its dimensions and ranks.\n\nArguments\n\ntt::TToperator: A Tensor Train operator object.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.tt_svdvals","page":"API","title":"TensorTrainNumerics.tt_svdvals","text":"tt_svdvals(x_tt::TTvector{T,N}; tol=1e-14) where {T<:Number, N}\n\nCompute the singular values of a Tensor Train (TT) vector x_tt.\n\nArguments\n\nx_tt::TTvector{T,N}: The input TT vector.\ntol=1e-14: Tolerance for truncating small singular values. Default is 1e-14.\n\nReturns\n\nΣ: An array of arrays containing the singular values for each TT core.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.tt2qtt","page":"API","title":"TensorTrainNumerics.tt2qtt","text":"tt2qtt(tt_tensor::TToperator{T,N}, row_dims::Vector{Vector{Int}}, col_dims::Vector{Vector{Int}}, threshold::Float64=0.0) where {T<:Number,N}\n\nConvert a TT (Tensor Train) operator to a QTT (Quantized Tensor Train) operator.\n\nArguments\n\ntt_tensor::TToperator{T,N}: The input TT operator.\nrow_dims::Vector{Vector{Int}}: A vector of vectors specifying the row dimensions for each core.\ncol_dims::Vector{Vector{Int}}: A vector of vectors specifying the column dimensions for each core.\nthreshold::Float64=0.0: A threshold for rank reduction during SVD. Default is 0.0, meaning no rank reduction.\n\nReturns\n\nqtt_tensor::TToperator{T,M}: The resulting QTT operator.\n\nDetails\n\nThis function converts a given TT operator into a QTT operator by splitting each core of the TT operator according to the specified row and column dimensions. It performs SVD on reshaped cores and applies rank reduction based on the given threshold. The resulting QTT cores are then used to construct the QTT operator.\n\n\n\n\n\ntt2qtt(tt_tensor::TTvector{T,N}, dims::Vector{Vector{Int}}, threshold::Float64=0.0) where {T<:Number,N}\n\nConvert a Tensor Train (TT) tensor to a Quantized Tensor Train (QTT) tensor.\n\nArguments\n\ntt_tensor::TTvector{T,N}: The input TT tensor to be converted.\ndims::Vector{Vector{Int}}: A vector of vectors specifying the dimensions for each core in the QTT tensor.\nthreshold::Float64=0.0: A threshold for rank reduction during the SVD step. Default is 0.0, meaning no rank reduction.\n\nReturns\n\nqtt_tensor::TTvector{T,M}: The resulting QTT tensor.\n\nDescription\n\nThis function converts a given TT tensor into a QTT tensor by splitting each core of the TT tensor according to the specified dimensions. It performs Singular Value Decomposition (SVD) on reshaped cores and applies rank reduction based on the given threshold. The resulting QTT cores are then assembled into a new QTT tensor.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.matricize","page":"API","title":"TensorTrainNumerics.matricize","text":"matricize(tt::TToperator{T, M}) where {T, M}\n\nConvert a tensor train operator (TToperator) into its matrix form.\n\nArguments\n\ntt::TToperator{T, M}: The tensor train operator to be matricized.\n\nReturns\n\nA matrix representation of the tensor train operator.\n\nDescription\n\nThe function takes a tensor train operator and converts it into a matrix by reshaping and permuting its cores. It starts with the first core and iteratively processes each subsequent core, updating the matrix representation at each step. If the size of the first core does not match the expected dimensions, an error is thrown.\n\n\n\n\n\nmatricize(tt::TTvector{T, M}) where {T, M}\n\nConvert a Tensor Train (TT) vector into a matrix form.\n\nArguments\n\ntt::TTvector{T, M}: A Tensor Train vector of type T and order M.\n\nReturns\n\nA matrix representation of the input Tensor Train vector.\n\nDescription\n\nThe function takes the first core of the Tensor Train vector and reshapes it into a matrix. It then iteratively processes each subsequent core, performing tensor contractions and reshaping operations to build the final matrix representation.\n\nErrors\n\nThrows an error if the size of the first core does not match the expected dimensions.\n\n\n\n\n\nmatricize(qtt::TToperator{Float64}, core::Int)::Vector{Float64}\n\nConvert a TToperator to a vector of Float64 values by extracting a specific core.\n\nArguments\n\nqtt::TToperator{Float64}: The TToperator to be converted.\ncore::Int: The core index to be used for the conversion.\n\nReturns\n\nVector{Float64}: A vector of Float64 values representing the specified core of the TToperator.\n\nDescription\n\nThis function converts a given TToperator into a vector of Float64 values by extracting the specified core. It first converts the TToperator to a full tensor using tto_to_tensor, then calculates the dyadic points and binary indices to extract the values from the tensor.\n\n\n\n\n\nmatricize(qtt::TTvector{Float64}, core::Int)::Vector{Float64}\n\nConvert a TTvector to a vector of Float64 values by extracting a specific core.\n\nArguments\n\nqtt::TTvector{Float64}: The TTvector to be converted.\ncore::Int: The core index to be used for the conversion.\n\nReturns\n\nVector{Float64}: A vector of Float64 values representing the specified core of the TTvector.\n\nDescription\n\nThis function converts a given TTvector into a vector of Float64 values by extracting the specified core. It first converts the TTvector to a full tensor using ttv_to_tensor, then calculates the dyadic points and binary indices to extract the values from the tensor.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.concatenate","page":"API","title":"TensorTrainNumerics.concatenate","text":"concatenate(tt1::TTvector, tt2::TTvector) -> TTvector\n\nConcatenates two TTvector objects tt1 and tt2 into a single TTvector. \n\nArguments\n\ntt1::TTvector: The first TTvector to concatenate.\ntt2::TTvector: The second TTvector to concatenate.\n\nReturns\n\nTTvector: A new TTvector that is the result of concatenating tt1 and tt2.\n\nThrows\n\nArgumentError: If the final rank of tt1 does not equal the initial rank of tt2.\n\n\n\n\n\nconcatenate(tt1::TToperator, tt2::TToperator) -> TToperator\n\nConcatenates two TToperators tt1 and tt2 into a single TToperator.\n\nArguments\n\ntt1::TToperator: The first TToperator.\ntt2::TToperator: The second TToperator.\n\nReturns\n\nTToperator: A new TToperator that is the concatenation of tt1 and tt2.\n\nThrows\n\nArgumentError: If the final rank of tt1 does not equal the initial rank of tt2.\n\nDescription\n\nThis function concatenates two TToperators by combining their tensor train vectors, dimensions, ranks, and operator types. The resulting TToperator has the combined properties of the input TToperators.\n\n\n\n\n\nconcatenate(tt::TTvector{T, N}, other::Union{TTvector{T}, Vector{Array{T, 3}}}, overwrite::Bool=false) where {T, N}\n\nConcatenates a TTvector with another TTvector or a vector of 3-dimensional arrays.\n\nArguments\n\ntt::TTvector{T, N}: The original TTvector to be concatenated.\nother::Union{TTvector{T}, Vector{Array{T, 3}}}: The TTvector or vector of 3-dimensional arrays to concatenate with tt.\noverwrite::Bool=false: If true, the original tt is modified in place. Otherwise, a copy of tt is made before concatenation.\n\nReturns\n\nTTvector{T, N_new}: A new TTvector with concatenated cores, updated dimensions, ranks, and orthogonality indicators.\n\nThrows\n\nDimensionMismatch: If the ranks or dimensions of tt and other do not match.\nArgumentError: If other is not of type TTvector or Vector{Array{T, 3}}.\n\n\n\n\n\n","category":"function"},{"location":"API/#tt_operators","page":"API","title":"tt_operators","text":"","category":"section"},{"location":"API/#TensorTrainNumerics.Δ_DD","page":"API","title":"TensorTrainNumerics.Δ_DD","text":"1d-discrete Laplacian\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.Δ_NN","page":"API","title":"TensorTrainNumerics.Δ_NN","text":"1D Discrete Laplacian for Neumann-Neumann (NN) Boundary Conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.Δ_DN","page":"API","title":"TensorTrainNumerics.Δ_DN","text":"1D Discrete Laplacian for Dirichlet-Neumann (DN) Boundary Conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.Δ_ND","page":"API","title":"TensorTrainNumerics.Δ_ND","text":"1D Discrete Laplacian for Neumann-Dirichlet (ND) Boundary Conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.Δ_Periodic","page":"API","title":"TensorTrainNumerics.Δ_Periodic","text":"1D Discrete Laplacian for Periodic Boundary Conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.Δ_tto","page":"API","title":"TensorTrainNumerics.Δ_tto","text":"n^d Discrete Laplacian in TTO format or 1D Laplacian if d=1.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.QTT_Tridiagonal_Toeplitz","page":"API","title":"TensorTrainNumerics.QTT_Tridiagonal_Toeplitz","text":"Constructs the QTT representation of a tridiagonal Toeplitz matrix with parameters α (main diagonal), β (upper diagonal), γ (lower diagonal) for size 2^l x 2^l.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.shift_tto","page":"API","title":"TensorTrainNumerics.shift_tto","text":"n^d discrete shift in TTO format with rank 2 of S = s ⊗ id ⊗ … ⊗ id + ⋯ + id ⊗ … ⊗ id ⊗ s\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.∇_DD","page":"API","title":"TensorTrainNumerics.∇_DD","text":"1D Discrete Gradient Operator for Dirichlet-Dirichlet (DD) Boundary Conditions\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.∇_tto","page":"API","title":"TensorTrainNumerics.∇_tto","text":"n^d Discrete Gradient in TTO format or 1D Gradient if d=1.\n\n\n\n\n\n","category":"function"},{"location":"API/#TensorTrainNumerics.Jacobian_tto","page":"API","title":"TensorTrainNumerics.Jacobian_tto","text":"Jacobian_tto(n::Int, d::Int, ∇_func::Function) -> TToperator{Float64, d}\n\nConstructs a tensor train (TT) representation of the Jacobian operator\n\nArguments\n\nn::Int: The size of each dimension in the tensor.\nd::Int: The number of dimensions.\n∇_func::Function: boundary TToperator.\n\nReturns\n\nTToperator{Float64, d}: A tensor train operator representing the Jacobian.\n\nDescription\n\nThis function generates the gradient operators for each dimension and adjusts the rank structure to accommodate all gradients. It constructs the tensor train cores for the first, middle, and last dimensions, and combines them into a TToperator.\n\n\n\n\n\n","category":"function"}]
}
